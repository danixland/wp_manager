#! /bin/bash

VERSION="0.8.3"
AUTHOR="Danilo 'danix' Macri <danix@danixland.net>"

#------------------------------------------------------------------------------
#                                  wp_manager
#               by Danilo 'danix' Macri <danix@danixland.net>
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#                               ### SCRIPT COLORS ###
#------------------------------------------------------------------------------
RED='\E[31;40m'
GREEN='\E[32;40m'
YELLOW='\E[33;40m'
BLUE='\E[34;40m'
COLOR_RESET=$(tput sgr0)

#------------------------------------------------------------------------------
#                               ### EXIT STATUSES ###
#------------------------------------------------------------------------------
STATUSDISPLAY=160
HELPDISPLAY=161

E_NOARGS=170
E_WRITECONFERR=171
E_MULTIPLEINSTANCES=172
E_MULTIPLESWITCHES=173
E_SETTINGSERRORS=174
E_NOVHOSTCONF=175
E_NEWSITEEXISTS=176
E_NEWSITEDIREXISTS=177
E_NOVHOSTSUPDATABLE=178
E_ONLYROOTALLOWED=179
E_UNKNOWNOPT=180
E_BKPNOSITE=181

#------------------------------------------------------------------------------
#                               ### OPTIONS ###
#------------------------------------------------------------------------------

# Script defaults - edits should go into the config file
set_defaults() {
# Binaries to use:
SVN=${SVN:-"/usr/bin/svn"}
MYSQLDUMP=${MYSQLDUMP:-"/usr/bin/mysqldump"}

# Set this variable to your server's DocumentRoot.
WEBSERVER=${WEBSERVER:-"/var/www/htdocs"}

# The admin email for your server
SERVERADMIN=${SERVERADMIN:-"admin@some.url"}

# The apache config file
APACHECONF=${APACHECONF:-"/etc/httpd/httpd.conf"}

# All Files inside the DocumentRoot for the VHosts will be owned
# by this user/group, so it is advisable to make your usual user
# part of the $APACHEGROUP to be able to modify files in the VHosts
# The server user under which the apache executable is running
APACHEUSER=${APACHEUSER:-"apache"}
# The server group under which the apache executable is running
APACHEGROUP=${APACHEGROUP:-"apache"}

# THE VIRTUAL HOSTS CONFIG FILES.
# The next two settings are mutually exclusive, if your distro uses the main
# httpd.conf file to store settings about your VirtualHosts, leave both 
# options empty.

# The Virtual Hosts config directory.
# If this option is used, it supersedes the $VHOSTCONF option so it is 
# ok to leave that empty.
VHOSTCONFDIR=${VHOSTCONFDIR:-"$(dirname $APACHECONF)/vhost.d"}
# If your distro uses one single file to store the VirtualHosts
# settings fill this parameter and leave the previous one empty.
VHOSTCONF=${VHOSTCONF:-"$(dirname $APACHECONF)/extra/httpd-vhosts.conf"}

# This is the interface where the VHost will be listening for connections.
# All VHosts will rely on this setting using name based vhosts for our setup.
VHOSTLISTEN=${VHOSTLISTEN:-"*:80"}

# The directory containing the local svn copy of the WordPress.org
# repository for WordPress itself as well as some other useful plugins.
# In this directory we'll also store some template files to be installed
# when we setup the vhost.
# By default it's sitting in the same directory that is containing the
# DocumentRoot, so in our case, by default will be in /var/www/.wp-base
BASEDIR=${BASEDIR:-".wp-base"}

# This is the directory that will hold our backups.
BACKUPDIR=${BACKUPDIR:-"/var/backups"}

# This is the mysql username that will be in charge of all the databases
# created by this script
DBUSER=${DBUSER:-""}

# The password for the mysql username
DBPASS=${DBPASS:-""}

# Change this if your mysql database is on a different server than the one
# where Apache is running
# WARNING - NEEDS TESTING
HOST=${HOST:-"localhost"}

# Shall we clean the tmpdir after every use?
CLEANUP=${CLEANUP:-"yes"}

# Developer plugins we want installed on our VHosts
WP_PLUGINS=${WP_PLUGINS:-(
    "developer"
    "debug-bar"
    "debug-bar-console"
    "debug-bar-cron"
    "debug-bar-extender"
    "rewrite-rules-inspector"
    "log-deprecated-notices"
    "monster-widget"
    "user-switching"
    "piglatin"
    "rtl-tester"
    "regenerate-thumbnails"
    "simply-show-ids"
    "theme-test-drive"
    "theme-check"
    "wordpress-importer"
)}

} # end set_defaults, do not change this line.

set_defaults

#------------------------------------------------------------------------------
# No need to modify anything from here on.
#------------------------------------------------------------------------------

# path to the config file. Can be relative to the script or absolute.
# RELATIVE SCRIPTCONFIG:
SCRIPTCONFIG=${SCRIPTCONFIG:-"$(dirname $0)/$(basename $0).conf"}
# ABSOLUTE SCRIPTCONFIG:
#SCRIPTCONFIG=${SCRIPTCONFIG:-"/etc/$(basename $0).conf"}

# Read the configfile if it exists
[ -f ${SCRIPTCONFIG} ] && . ${SCRIPTCONFIG}

# Present Working Directory
PWD=$(pwd)
# Here we'll store the temporary files used during this script operation.
TMPDIR=${TMPDIR:-"/tmp/wp_manager"}.$$
# Let's prevent the script from running more than one instance at a time.
PIDFILE=/var/tmp/$(basename $0).pid

# This variable will hold a list of VHosts created by the script
if [ -z "$VHOSTCONFDIR" ]; then
    # we are using the monolitic $VHOSTCONF to pull informations about our VHosts
    VHOSTLIST=$(grep "# BEGIN WP_MANAGER VHOST" ${VHOSTCONF} | cut -d " " -f 5)
else
    # we have a separate directory 
    VHOSTLIST=""
    [ -n "$(/bin/ls -A ${VHOSTCONFDIR}/wpm_*.conf 2>/dev/null)" ] && VHOSTLIST=$(basename -a $(/bin/ls -A ${VHOSTCONFDIR}/wpm_*.conf 2>/dev/null)|sed 's/wpm_\([^ ]*\)\.conf/\1/')
fi


# WordPress svn addresses
WORDPRESS=${WORDPRESS:-"https://core.svn.wordpress.org/trunk/"}
WPPLUGIN=${WPPLUGIN:-"https://plugins.svn.wordpress.org"}
# helper function that checks for already installed VHosts
check_installed() {
    new_site=$1
    if [ $VHOSTCONFDIR ]; then
        checkstring="\bwpm_${new_site}.conf\b"
    else
        checkstring="\b${new_site}\b"
    fi
    echo "${VHOSTLIST}" | grep -q "${checkstring}"
    if [[ $? == 0 || -d ${WEBSERVER}/${new_site} ]]; then
        # return a special exit code to let other functions know that the site already exists
        return 150
    fi
}

# Create tmp directory
mktmp() {
    # check for tmpdir and delete it if existing, then recreate it
    if [ -d ${TMPDIR} ]; then
        rm -rf $TMPDIR
        mkdir $TMPDIR
    else
        mkdir $TMPDIR
    fi
}

# Helper that performs a Setup Check
check_setup() {
    WARNINGMSG="WARNING - NO CONFIGURATION FILE FOUND.\n"
    WARNINGMSG+="It is advisable to create a config file running '$(basename $0) -w'\n"
    WARNINGMSG+="and edit it to suit your current server configuration or you won't"
    WARNINGMSG+="be able to perform most operations with this script."

    ERRORMSG=""

    # we need to check our executables before anything else
    if [ ! -x ${SVN} ]; then
        ERRORMSG+="\"${SVN}\" executable not found, check your \$SVN setting."
    fi
    if [ ! -x ${MYSQLDUMP} ]; then
        ERRORMSG+="\"${MYSQLDUMP}\" executable not found, check your \$MYSQLDUMP setting."
    fi
    # check the DocRoot
    if [ ! -d ${WEBSERVER} ]; then
        ERRORMSG+="\n\"${WEBSERVER}\" is not a directory, check your \$WEBSERVER setting."
    fi
    # Apache conf file check
    if [ ! -r ${APACHECONF} ]; then
        ERRORMSG+="\nCannot read \"${APACHECONF}\", check your \$APACHECONF setting."
    else
        # check the VHosts conf dir first
        if [[ ${VHOSTCONFDIR} ]]; then
            if [ ! -d ${VHOSTCONFDIR} ]; then
                ERRORMSG+="\n\"${VHOSTCONFDIR}\" is not a directory, check your \$VHOSTCONFDIR setting."
            fi
        else
            # finally check the VHosts file
            if [[ ${VHOSTCONF} ]]; then
                if [ ! -r ${VHOSTCONF} ]; then
                    ERRORMSG+="\n\"${VHOSTCONF}\" can't be read, check your \$VHOSTCONF setting."
                fi
            fi
        fi
    fi
    # check if we have a username and password, or we won't be able to install everything
    if [[ -z $DBUSER || -z $DBPASS ]]; then
        ERRORMSG+="\n\"\$DBUSER\" or \"\$DBPASS\" are not set. This script won't be able to install new VHosts without those settings."
    fi

    [ ! -r ${SCRIPTCONFIG} ] &&  echo -e "${YELLOW}${WARNINGMSG}${COLOR_RESET}"

    if [[ $ERRORMSG != "" ]]; then
        echo -e ${RED}
        echo -e "CONFIGURATION ERRORS:"
        echo -e $ERRORMSG
        echo -e ${COLOR_RESET}
        rm -f $PIDFILE
        exit $E_SETTINGSERRORS
    else
        echo -e ${GREEN}
        echo -e "SETUP CHECK PASSED."
        echo -e ${COLOR_RESET}
    fi
}

#------------------------------------------------------------------------------
#                           ### Display help text ###
#------------------------------------------------------------------------------
# USAGE: $0 -h
usage() {

    license="`basename $0` is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA."

    echo "$(basename $0) version ${VERSION}"
    echo "written by ${AUTHOR}"
    echo -e "${GREEN}${license}${COLOR_RESET}"
    echo -e "\n$(basename $0) is a bash script to install and manage WordPress VHosts in a LAMP environment\n"
    echo "USAGE: `basename $0 ` [OPTION] [vhostname]"
    echo -e "\nOptions:"
    echo -e "-h, --help\t\t\tshow this the help and exits."
    echo -e "-w, --write-config\t\tGenerate a config file for this script."
    echo -e "-t, --test-config\t\tcheck the config and display a brief summary."
    echo -e "-s, --base-setup\t\tSetup the local cache, downloads WordPress and the basic plugins."
    echo -e "-b, --base-update\t\tUpdates the local cached WordPress codebase and plugins"
    echo -e "-l, --list\t\t\tLists all VirtualHosts created by this script."
    echo -e "-i, --install-new <NEW SITE>\tInstall the VHost 'NEW SITE'"
    echo -e "-d, --delete <SITE NAME>\tDeletes the VHost 'SITE NAME' and all of its data"
    echo -e "-u, --update\t\t\tUpdates all VHosts created by this script."
    echo -e "-k, --backup <SITE NAME>\tCreates a backup of the VHost 'SITE NAME'."
}

#------------------------------------------------------------------------------
#                           ### Generate config file ###
#------------------------------------------------------------------------------
# USAGE: $0 -w
generateconf() {
    if [ -r $SCRIPTCONFIG ]; then
        echo "Backing up current '${SCRIPTCONFIG}' to ${SCRIPTCONFIG}.$(date +%Y%m%d_%H%M)."
        mv -f ${SCRIPTCONFIG} ${SCRIPTCONFIG}.$(date +%Y%m%d_%H%M)
    fi
    echo "Writing '${SCRIPTCONFIG}'."
    sed  -n '/^set_defaults() {/,/^} # end set_defaults, do not change this line./p' $0 \
        | grep -v set_defaults \
        | sed -e 's/^\([^=]*\)=\${\1:-\([^}]*\)}/\1=\2/' \
        | sed -e 's/^\(WP_PLUGINS\)=\${\1:-\([^=]*\)/\1=\2/' -e 's/}$//' \
        > ${SCRIPTCONFIG}
    if [ -r ${SCRIPTCONFIG} ]; then
        echo -e "${GREEN}${SCRIPTCONFIG} written correctly. Exiting now."
        echo -e ${COLOR_RESET}
        rm -f $PIDFILE
    else
        echo -e ${RED}
        echo "Could not write '${SCRIPTCONFIG}'. Exiting."
        echo -e ${COLOR_RESET}
        rm -f $PIDFILE
        exit $E_WRITECONFERR
    fi
}

#------------------------------------------------------------------------------
#                           ### List our VHosts ###
#------------------------------------------------------------------------------
# USAGE: $0 -l
list_vhosts() {
    if [ -n "$VHOSTLIST" ]; then
        VHOSTCOUNT=$(echo ${VHOSTLIST} | wc -w)
        echo -e "This script has generated ${VHOSTCOUNT} Virtual Hosts.\n"
        echo $VHOSTLIST
    else
        echo "no vhosts yet. Create one first"
    fi
}

#------------------------------------------------------------------------------
#                           ### Display config ###
#------------------------------------------------------------------------------
display_config() {
    echo -e "${GREEN}CURRENT CONFIGURATION:${COLOR_RESET} \n"
    echo -e "Config File\t\t = ${BLUE}$SCRIPTCONFIG${COLOR_RESET}"
    echo -e "Webserver\t\t = ${GREEN}$WEBSERVER${COLOR_RESET}"
    echo -e "Apache config\t\t = ${GREEN}$APACHECONF${COLOR_RESET}"
    echo -e "Apache user:group\t = ${GREEN}${APACHEUSER}:${APACHEGROUP}${COLOR_RESET}"
    echo -e "Server Admin\t\t = ${GREEN}$SERVERADMIN${COLOR_RESET}"
    echo -e "vhost config Directory\t = ${GREEN}$VHOSTCONFDIR${COLOR_RESET}"
    echo -e "vhost config file\t = ${GREEN}$VHOSTCONF${COLOR_RESET}"
    echo -e "Base Directory\t\t = ${GREEN}$BASEDIR${COLOR_RESET}"
    echo -e "tmp Directory\t\t = ${GREEN}$TMPDIR${COLOR_RESET}"
    echo -e "Backup Directory\t = ${GREEN}$BACKUPDIR${COLOR_RESET}"
    echo -e "Username\t\t = ${GREEN}$DBUSER${COLOR_RESET}"
    echo -e "Password\t\t = ${GREEN}$DBPASS${COLOR_RESET}"
    echo -e "Host\t\t\t = ${GREEN}$HOST${COLOR_RESET}"
}

#------------------------------------------------------------------------------
#                           ### Update VHosts ###
#------------------------------------------------------------------------------
# USAGE: $0 -u
update() {
    directory=$(dirname ${WEBSERVER})/${BASEDIR}
    todelete="${directory}/patches/wp-delete.txt"
    VHOSTS=$(echo ${VHOSTLIST})
    if [ -n "$VHOSTS" ]; then
        for site in $VHOSTS; do
            echo -e "${BLUE}Updating WordPress install on ${GREEN}${WEBSERVER}/$site${COLOR_RESET}"
            cd ${WEBSERVER}/$site
            if [ -s $todelete ]; then
                echo -e "${BLUE}Deleting obsolete files${COLOR_RESET}"
                for file in $(cat $todelete); do
                    rm $file
                done
            fi
            echo -e "${BLUE}Updating WordPress files${COLOR_RESET}"
            cp -R ${directory}/patches/wp-add/* .
        done
    else
        echo -e "${YELLOW}no VHosts to update, Exiting.${COLOR_RESET}"
        cd $PWD
        rm -f $PIDFILE
        exit $E_NOVHOSTSUPDATABLE
    fi
    cd $PWD
    echo -e "${GREEN}aLL VHosts are up to date now.${COLOR_RESET}"
}

#------------------------------------------------------------------------------
#                           ### Backup selected VHost ###
#------------------------------------------------------------------------------
backup() {
    bkp_vhost=$1
    clean_site=${bkp_vhost//[^a-zA-Z0-9]/}
    check_installed $clean_site
    if [ $? -ne 150 ]; then
        # $clean_site doesn't exists. nothing to backup
        echo "${clean_site} doesn't exists. I have nothing to backup. Exiting now."
        [ $CLEANUP == "yes" ] && [ -d $TMPDIR ] && rm -rf $TMPDIR
        rm -f $PIDFILE
        exit $E_BKPNOSITE
    fi

    to_backup=${clean_site}-$(date +%s)

    mkdir -p ${TMPDIR}/${to_backup}/WP
    echo -e "${GREEN}Backing up '${clean_site}'.${COLOR_RESET}"

    # we check first for a VHOSTCONFDIR, and if we haven't set one we try other methods
    if [ $VHOSTCONFDIR ]; then
        # create directory to hold our backup
        cp -v ${VHOSTCONFDIR}/wpm_${clean_site}.conf ${TMPDIR}/${to_backup}/

    # no VHOSTCONFDIR, let's check for a vhost-conf file. If we have it we can proceed
    elif [ $VHOSTCONF ]; then
        sed -n "/# BEGIN WP_MANAGER VHOST ${clean_site}/,/# END WP_MANAGER VHOST ${clean_site}/p" ${VHOSTCONF} > ${TMPDIR}/${to_backup}/$(basename ${VHOSTCONF})
    fi
    # TODO: implement delete routine based on httpd.conf file

    cp -vr ${WEBSERVER}/${clean_site}/* ${TMPDIR}/${to_backup}/WP
    ${MYSQLDUMP} ${clean_site} > ${TMPDIR}/${to_backup}/${clean_site}.sql

    echo -e "${BLUE}Compressing backup.${COLOR_RESET}"
    cd ${TMPDIR}
    tar cJvf ${BACKUPDIR}/$(basename $0)/${to_backup}.tar.xz ${to_backup}/
    echo -e "${GREEN}${clean_site} backup finished successfully.${COLOR_RESET}"
    cd $PWD
}
# TO DO: create a backup restore function

#------------------------------------------------------------------------------
#                           ### Install new VHost ###
#------------------------------------------------------------------------------
# USAGE: $0 -i new_site
install_new() {
    directory=$(dirname ${WEBSERVER})/${BASEDIR}
    new_site=$1
    clean_site=${new_site//[^a-zA-Z0-9]/}
    check_installed $clean_site
    if [ $? -eq 150 ]; then
        # $clean_site already exists
        echo "${clean_site} already exists. Exiting now."
        [ $CLEANUP == "yes" ] && [ -d $TMPDIR ] && rm -rf $TMPDIR
        rm -f $PIDFILE
        exit $E_NEWSITEEXISTS
    fi
    echo "installing $clean_site"
    # we check first for a VHOSTCONFDIR, and if we haven't set one we try other methods
    if [ $VHOSTCONFDIR ]; then
        VHOSTFILE="wpm_${clean_site}.conf"
        cat >> ${VHOSTCONFDIR}/${VHOSTFILE} <<EOVH
# BEGIN WP_MANAGER VHOST ${clean_site}
<VirtualHost ${VHOSTLISTEN}>
    ServerAdmin ${SERVERADMIN}
    DocumentRoot "${WEBSERVER}/${clean_site}"
    ServerName ${clean_site}
    ErrorLog "/var/log/httpd/${clean_site}-error_log"
    CustomLog "/var/log/httpd/${clean_site}-access_log" common
    <Directory /var/www/htdocs/${clean_site}>
        DirectoryIndex index.php
        AllowOverride All
        Order Allow,deny
        Allow from all
        Require all granted
    </Directory>
</VirtualHost>
# END WP_MANAGER VHOST ${clean_site}

EOVH

    # so, do we have a vhost-conf file? If yes copy it to our tmp directory and edit
    # it there before putting it back in its place.
    elif [ $VHOSTCONF ]; then
        TMPVHOSTCONF=${TMPDIR}/$(basename ${VHOSTCONF}).$(date +%Y%m%d_%H%M)
        cp ${VHOSTCONF} $TMPVHOSTCONF
        cat >> ${TMPVHOSTCONF} <<EOVH
# BEGIN WP_MANAGER VHOST ${clean_site}
<VirtualHost ${VHOSTLISTEN}>
    ServerAdmin ${SERVERADMIN}
    DocumentRoot "${WEBSERVER}/${clean_site}"
    ServerName ${clean_site}
    ErrorLog "/var/log/httpd/${clean_site}-error_log"
    CustomLog "/var/log/httpd/${clean_site}-access_log" common
    <Directory /var/www/htdocs/${clean_site}>
        DirectoryIndex index.php
        AllowOverride All
        Order Allow,deny
        Allow from all
        Require all granted
    </Directory>
</VirtualHost>
# END WP_MANAGER VHOST ${clean_site}

EOVH
        # let's put the file back in its place but we can make a backup first
        echo "Backing up $(basename ${VHOSTCONF}) to $(basename ${VHOSTCONF}).$(date +%Y%m%d_%H%M)"
        mv ${VHOSTCONF} ${VHOSTCONF}.$(date +%Y%m%d_%H%M)
        cp ${TMPVHOSTCONF} ${VHOSTCONF}
        [ $? -eq 0 ] && echo "${VHOSTCONF} modified successfully"

    # We don't have a vhosts config directory nor a monolitic vhost config file, falling back to 
    # modifying the main httpd.conf file
    # WARNING - not yet implemented
    else
        echo -e "${RED}using only httpd.conf is not yet working.${COLOR_RESET}"
        exit $E_NOVHOSTCONF
    fi

    echo "Adding MYSQL database"
    if [ -r "/root/.my.cnf" ]; then
        mysql -uroot <<MYSQLSCRIPT
CREATE DATABASE IF NOT EXISTS ${clean_site};
GRANT ALL PRIVILEGES ON ${clean_site}.* TO '${DBUSER}'@'localhost' IDENTIFIED BY '${DBPASS}';
FLUSH PRIVILEGES;
MYSQLSCRIPT
    else
        echo "Please enter the password for mysql root user:"
        read mysqlrootpass
        mysql -uroot -p${mysqlrootpass} <<MYSQLSCRIPT
CREATE DATABASE IF NOT EXISTS ${clean_site};
GRANT ALL PRIVILEGES ON ${clean_site}.* TO '${DBUSER}'@'localhost' IDENTIFIED BY '${DBPASS}';
FLUSH PRIVILEGES;
MYSQLSCRIPT
    fi
    [ $? -eq 0 ] && echo "database and user created successfully"

    echo "installing WordPress"
    mkdir -p ${WEBSERVER}/${clean_site}
    mkdir -p ${TMPDIR}/PLUGINS
    echo -e "${BLUE}Exporting WordPress files${COLOR_RESET}"
    ${SVN} export ${directory}/WP ${TMPDIR}/WP
    echo -e "${BLUE}Exporting WordPress plugins${COLOR_RESET}"
    for plugin_dir in $(/bin/ls ${directory}/PLUGINS); do
        echo -e "${BLUE}Exporting ${GREEN}${plugin_dir}${COLOR_RESET}"
        ${SVN} export ${directory}/PLUGINS/${plugin_dir} ${TMPDIR}/PLUGINS/${plugin_dir}
    done

    echo -e "${BLUE}installing WordPress files and plugins to ${GREEN}${clean_site}${COLOR_RESET}"
    cp -R ${TMPDIR}/WP/* ${WEBSERVER}/${clean_site}/
    cp -R ${TMPDIR}/PLUGINS/* ${WEBSERVER}/${clean_site}/wp-content/plugins/
    # final edit to wp-config.php before installing it to $clean_site
    cp ${directory}/wp-config.php ${TMPDIR}/wp-config.php
    sed -i "s/database_name_here/${clean_site}/" ${TMPDIR}/wp-config.php
    cp ${TMPDIR}/wp-config.php ${WEBSERVER}/${clean_site}/wp-config.php

    echo -e "${BLUE}Changing owner of ${GREEN}${clean_site}${BLUE} to ${APACHEUSER}:${APACHEGROUP} ${COLOR_RESET}"
    chown -R ${APACHEUSER}:${APACHEGROUP} ${WEBSERVER}/${clean_site}

    echo -e "${GREEN}A new website has been created and is awaiting for you."
    echo -e "It's now time to restart your apache webserver and enjoy WordPress at 'http://${clean_site}'.\n"
    echo -e "${YELLOW}Don't forget to update your 'hosts' file on every client that is going to"
    echo "access this server on your lan."
    echo -e "${BLUE}You can use this command to modify the file /etc/hosts on your linux client:"
    echo -e "${GREEN}echo -e \"\$(hostname -i)\\\t\\\t${clean_site}\" >> /etc/hosts${COLOR_RESET}"
}

#------------------------------------------------------------------------------
#                           ### Setup base files ###
#------------------------------------------------------------------------------
# USAGE: $0 -s
base_setup() {
    directory=$(dirname ${WEBSERVER})/${BASEDIR}
    echo -e "${BLUE}installing base files inside ${GREEN}'${directory}'"
    if [ ! -d $directory ]; then
        echo -e "${BLUE}creating base directory '${directory}'"
        mkdir -p $directory
    else
        echo -e "${YELLOW}${directory} already exists."
        echo -e "If you're trying to update your base directory you can run:"
        echo -e "${GREEN}'$(basename $0) -b'${YELLOW} without needing to rebuild.${BLUE}\n"
        read -p "do you really wish to rebuild ${directory}? [y/n] " -n 1 -r; echo -e ${COLOR_RESET}
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            [ $CLEANUP == "yes" ] && [ -d $TMPDIR ] && rm -rf $TMPDIR
            rm -f $PIDFILE
            exit $USERABORTED
        else
            echo -e "${BLUE}rebuilding base directory ${GREEN}'${directory}'${COLOR_RESET}"
            rm -rf $directory && mkdir $directory
        fi
    fi
    # create patches directory
    mkdir ${directory}/patches
    # echo today's date in unix timestamp (no seconds)
    touch ${directory}/lastupdate && echo $(date -d $(date +"%Y-%m-%d") +%s) > ${directory}/lastupdate
    # let's get salty! we'll need those keys in a minute
    echo -e "${BLUE}Downloading secret-keys from WordPress.org API${COLOR_RESET}"
    wget -O ${TMPDIR}/wp.keys https://api.wordpress.org/secret-key/1.1/salt/
    echo -e "${BLUE}Downloading WordPress from svn${COLOR_RESET}"
    ${SVN} co ${WORDPRESS} ${directory}/WP
    echo -e "${BLUE}creating base wp-config.php${COLOR_RESET}"
    cp ${directory}/WP/wp-config-sample.php ${TMPDIR}/wp-config.php
    # substitute username and password with our settings
    sed -i "s/username_here/${DBUSER}/" ${TMPDIR}/wp-config.php
    sed -i "s/password_here/${DBPASS}/" ${TMPDIR}/wp-config.php
    # copy the secret keys into our file
    sed -i "/#@-/r ${TMPDIR}/wp.keys" ${TMPDIR}/wp-config.php
    sed -i "/#@+/,/#@-/d" ${TMPDIR}/wp-config.php
    # activate WP_DEBUG and SAVEQUERIES
    sed -i "s/false)/true)/" ${TMPDIR}/wp-config.php
    sed -i "/define('WP_DEBUG'/ a define( 'SAVEQUERIES', true );" ${TMPDIR}/wp-config.php
    # put the wp-config.php file back in its place
    cp ${TMPDIR}/wp-config.php ${directory}/wp-config.php
    # download every plugin we need from svn inside PLUGINS directory
    echo -e "${BLUE}Downloading plugins${COLOR_RESET}"
    [ ! -d ${directory} ] && mkdir ${directory}/PLUGINS
    for plugin in "${WP_PLUGINS[@]}"; do
        echo -e "${BLUE}Downloading ${GREEN}${plugin}${COLOR_RESET}"
        ${SVN} co ${WPPLUGIN}/${plugin}/trunk ${directory}/PLUGINS/${plugin}
    done
    echo -e "\n${GREEN}All base files have been installed successfully. Existing.${COLOR_RESET}"
}

#------------------------------------------------------------------------------
#                           ### Update base files ###
#------------------------------------------------------------------------------
# USAGE: $0 -b
base_update() {
    directory=$(dirname ${WEBSERVER})/${BASEDIR}
    # test last update - ideally this options needs to run once a day
    if [ -r ${directory}/lastupdate ]; then
        lastup=$(cat ${directory}/lastupdate)
        today=$(date -d $(date +"%Y-%m-%d") +%s)
        if [ $today -eq $lastup ]; then
            echo -e "${YELLOW}It appears that you updated less than 1 day ago.${BLUE}\n"
            read -p "do you really wish to continue the update? [y/n] " -n 1 -r; echo -e ${COLOR_RESET}
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                [ $CLEANUP == "yes" ] && [ -d $TMPDIR ] && rm -rf $TMPDIR
                rm -f $PIDFILE
                exit $USERABORTED
            fi
        fi
    fi
    echo -e "${BLUE}Updating base files inside ${GREEN}'${directory}'"
    echo -e "${BLUE}Creating patch files inside ${GREEN}'${directory}/patches/'${COLOR_RESET}"
    [ -d ${directory}/patches ] && rm ${directory}/patches/*
    # now we have a clean old copy of WordPress
    ${SVN} export ${directory}/WP ${TMPDIR}/WP.old
    # and a clean new copy here
    ${SVN} up ${directory}/WP
    ${SVN} export ${directory}/WP ${TMPDIR}/WP.new
    # let's create some patch files containing the name of all the modified files 
    # between the two versions of WP

# Find files existing only in one of the two versions, either new or old
#   diff -qr WP.old WP.new/ |grep Only | sed -e 's/Only in //' -e 's/: /\//'
    cd $TMPDIR
    # Get those files that needs to be deleted with: 
    diff -qr WP.old WP.new/ |grep Only |grep -e old | sed -e 's/Only in //' -e 's/: /\//' > ${directory}/patches/wp-delete.txt
    # And files that need to be added with:
    diff -qr WP.old WP.new/ |grep Only |grep -e new | sed -e 's/Only in //' -e 's/: /\//' >> wp-add-update.txt
    # And finally we can get those files that need to be updated with:
    diff -qr WP.old WP.new/ | cut -d " " -f 4 |grep WP. >> wp-add-update.txt
    sed 's/WP.new\///' < wp-add-update.txt > wp-patch.txt
    mkdir -p ${directory}/patches/wp-add
    mods=$(cat ${TMPDIR}/wp-patch.txt)
    cd WP.new
    for i in $mods;do
        cp --parents $i ${directory}/patches/wp-add/
    done
    cd $PWD

    echo -e "${BLUE}Updating plugins${COLOR_RESET}"
    for plugin_dir in $(/bin/ls ${directory}/PLUGINS); do
        echo -e "${BLUE}Updating ${GREEN}${plugin_dir}${COLOR_RESET}"
        ${SVN} up ${directory}/PLUGINS/${plugin_dir}
    done
    echo $(date -d $(date +"%Y-%m-%d") +%s) > ${directory}/lastupdate
    echo -e "\n${GREEN}All base files have been updated successfully. Existing.${COLOR_RESET}"
}

#------------------------------------------------------------------------------
#                           ### Delete selected VHost ###
#------------------------------------------------------------------------------
delete() {
    del_vhost=$1
    clean_site=${del_vhost//[^a-zA-Z0-9]/}
    check_installed $clean_site
    if [ $? -ne 150 ]; then
        # $clean_site doesn't exists. nothing to delete
        echo "${clean_site} doesn't exists. I have nothing to delete. Exiting now."
        [ $CLEANUP == "yes" ] && [ -d $TMPDIR ] && rm -rf $TMPDIR
        rm -f $PIDFILE
        exit $E_NEWSITEEXISTS
    fi

    echo -e "${RED}This will permanently delete ${clean_site}"
    read -p "do you really wish to continue? [y/n] " -n 1 -r; echo -e ${COLOR_RESET}
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        [ $CLEANUP == "yes" ] && [ -d $TMPDIR ] && rm -rf $TMPDIR
        rm -f $PIDFILE
        exit $USERABORTED
    else
        # we check first for a VHOSTCONFDIR, and if we haven't set one we try other methods
        if [ $VHOSTCONFDIR ]; then
            echo -e "${YELLOW}Deleting ${GREEN}'${clean_site}'${YELLOW} entry from Apache.${COLOR_RESET}"
            rm -f ${VHOSTCONFDIR}/wpm_${clean_site}.conf

        # no VHOSTCONFDIR, let's check for a vhost-conf file. If we have it we can proceed
        elif [ $VHOSTCONF ]; then
            echo -e "${YELLOW}Deleting ${GREEN}'${clean_site}'${YELLOW} entry from ${VHOSTCONF}.${COLOR_RESET}"
            TMPVHOSTCONF=${TMPDIR}/$(basename ${VHOSTCONF}).$(date +%Y%m%d_%H%M)
            # let's back it up first and then we can work on a copy
            cp -v ${VHOSTCONF} $(dirname ${VHOSTCONF})/$(basename ${VHOSTCONF}).$(date +%Y%m%d_%H%M)
            sed -i "/# BEGIN WP_MANAGER VHOST ${clean_site}/,/# END WP_MANAGER VHOST ${clean_site}/d" ${VHOSTCONF}
        fi
        # TODO: implement delete routine based on httpd.conf file

        echo -e "${YELLOW}Deleting files in ${GREEN}'${WEBSERVER}/${clean_site}'${COLOR_RESET}"
        rm -rf ${WEBSERVER}/${clean_site}

        echo -e "${YELLOW}Deleting database entry for ${GREEN}'${clean_site}'${COLOR_RESET}"
        if [ -r "/root/.my.cnf" ]; then
            mysql -uroot <<MYSQLSCRIPT
DROP DATABASE IF EXISTS ${clean_site};
FLUSH PRIVILEGES;
MYSQLSCRIPT
        else
            echo "Please enter the password for mysql root user:"
            read mysqlrootpass
            mysql -uroot -p${mysqlrootpass} <<MYSQLSCRIPT
DROP DATABASE IF EXISTS ${clean_site};
FLUSH PRIVILEGES;
MYSQLSCRIPT
        fi

    fi
    echo -e "${GREEN}Successfully deleted ${clean_site} from the system."
    echo -e "For the change to take effect you should restart your httpd server.${COLOR_RESET}"
}

#------------------------------------------------------------------------------
#                           ### Ready? Set, GO!! ###
#------------------------------------------------------------------------------

# Only root should run this script
if [[ $EUID -ne 0 ]]; then
    echo -e "${RED}Only root can run this script. Exiting${COLOR_RESET}"
    exit $E_ONLYROOTALLOWED
fi

# Make sure the PID file is removed when we kill the process
trap 'rm -f $PIDFILE; exit 1' TERM INT

# we need a backup directory in any case, so check for it and make it
[ ! -d ${BACKUPDIR}/$(basename $0) ] && mkdir -p ${BACKUPDIR}/$(basename $0)

# check $PIDFILE and abort if one exists
if [ -e $PIDFILE ]; then
    echo "Another instance ($(cat $PIDFILE)) still running?"
    echo "If you are sure that no other instance is running, delete the lockfile"
    echo "'${PIDFILE}' and re-start this script."
    echo "Aborting now..."
    exit $E_MULTIPLEINSTANCES
else
    echo $$ > $PIDFILE

    # Parse the commandline options:
    if (( $# == 0 )); then
        usage
        rm -f $PIDFILE; exit $HELPDISPLAY
    else
        while [ $# -gt 0 ]; do
            case $1 in
                -b| --base-update ) check_setup
                    mktmp
                    base_update
                    break
                    ;;
                -i| --install-new ) check_setup
                    mktmp
                    install_new $2
                    break
                    ;;
                -d| --delete ) check_setup
                    mktmp
                    delete $2
                    break
                    ;;
                -u| --update ) check_setup
                    mktmp
                    update
                    break
                    ;;
                -k| --backup ) check_setup
                    mktmp
                    backup $2
                    break
                    ;;
                -s| --base-setup ) check_setup
                    mktmp
                    base_setup
                    break
                    ;;
                -l| --list ) list_vhosts
                    break
                    ;;
                -w| --write-config ) generateconf
                    break
                    ;;
                -h| --help ) usage
                    rm -f $PIDFILE; exit $HELPDISPLAY
                    ;;
                -t| --test-config ) display_config
                    check_setup
                    rm -f $PIDFILE; exit $STATUSDISPLAY
                    ;;
                * ) usage
                    rm -f $PIDFILE; exit $E_UNKNOWNOPT
                    ;; # default behaviour
            esac
            shift
        done
    fi
fi

if [ $CLEANUP == "yes" ]; then
    [ -d $TMPDIR ] && rm -rf $TMPDIR
fi
rm -f $PIDFILE
exit 0

